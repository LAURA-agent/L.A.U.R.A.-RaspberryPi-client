#!/usr/bin/env python3
"""
Pi500 Note Sender
Sends pi500_note.txt to Mac server via HTTP/MCP endpoint
"""

import json
import requests
import sys
from pathlib import Path
from datetime import datetime
from communication.client_config import get_network_appropriate_server_url

class Pi500NoteSender:
    """Client to send notes from Pi to Mac server"""
    
    def __init__(self):
        # Get the appropriate server URL based on network
        base_url = get_network_appropriate_server_url()
        # Convert WebSocket/SSE URL to HTTP endpoint
        self.mac_endpoint = base_url.replace(':8765', ':8080').replace('/events/sse', '') + '/api/pi500_note'
        self.note_file_path = Path("/home/user/RP500-Client/pi500_note.txt")
        
    def send_note(self) -> dict:
        """Send pi500_note.txt to Mac server"""
        try:
            # Check if note file exists
            if not self.note_file_path.exists():
                return {
                    "success": False,
                    "error": f"Note file not found: {self.note_file_path}",
                    "timestamp": datetime.now().isoformat()
                }
            
            # Read note content
            with open(self.note_file_path, 'r', encoding='utf-8') as f:
                note_content = f.read()
            
            if not note_content.strip():
                return {
                    "success": False,
                    "error": "Note file is empty",
                    "timestamp": datetime.now().isoformat()
                }
            
            # Prepare payload
            payload = {
                "note_content": note_content,
                "note_filename": "pi500_note.txt",
                "source_device": "Pi500-og",
                "timestamp": datetime.now().isoformat(),
                "note_size": len(note_content)
            }
            
            # Send to Mac server
            print(f"[Pi500NoteSender] Sending note to: {self.mac_endpoint}")
            print(f"[Pi500NoteSender] Note size: {len(note_content)} characters")
            
            response = requests.post(
                self.mac_endpoint,
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"[Pi500NoteSender] ✅ Note sent successfully!")
                return {
                    "success": True,
                    "message": "Note sent to Mac successfully",
                    "server_response": result,
                    "endpoint": self.mac_endpoint,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                return {
                    "success": False,
                    "error": f"Server returned status {response.status_code}: {response.text}",
                    "endpoint": self.mac_endpoint,
                    "timestamp": datetime.now().isoformat()
                }
                
        except requests.exceptions.RequestException as e:
            return {
                "success": False,
                "error": f"Network error: {str(e)}",
                "endpoint": self.mac_endpoint,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"Unexpected error: {str(e)}",
                "timestamp": datetime.now().isoformat()
            }
    
    def create_sample_note(self) -> dict:
        """Create a sample note for testing"""
        try:
            sample_content = f"""## Pi500 Note - {datetime.now().strftime('%Y-%m-%d %H:%M')}

### Recent Activities
- Updated network configuration for Mac server migration
- Implemented automatic LAN/Public IP detection
- Added voice-activated note transfer system

### System Status
- VOSK server: Running on localhost:8765
- TTS notifications: Functional
- Claude Code integration: Active
- Network: {get_network_appropriate_server_url()}

### Next Steps
- Test note transfer to Mac
- Verify MCP tool integration
- Add more wake words as needed

---
Generated by Pi500 LAURA
"""
            
            with open(self.note_file_path, 'w', encoding='utf-8') as f:
                f.write(sample_content)
                
            return {
                "success": True,
                "message": f"Sample note created at {self.note_file_path}",
                "content_size": len(sample_content)
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": f"Failed to create sample note: {str(e)}"
            }

def main():
    """Main function for command line usage"""
    sender = Pi500NoteSender()
    
    if len(sys.argv) > 1 and sys.argv[1] == "--create-sample":
        # Create sample note
        result = sender.create_sample_note()
        print(json.dumps(result, indent=2))
        if not result["success"]:
            sys.exit(1)
    
    # Send the note
    result = sender.send_note()
    print(json.dumps(result, indent=2))
    
    if result["success"]:
        print(f"\n🎉 Note successfully sent to Mac server!")
        sys.exit(0)
    else:
        print(f"\n❌ Failed to send note: {result['error']}")
        sys.exit(1)

if __name__ == "__main__":
    main()